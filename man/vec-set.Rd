% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/set.R
\name{vec-set}
\alias{vec-set}
\alias{vec_set_intersect}
\alias{vec_set_difference}
\alias{vec_set_union}
\title{Set operations}
\usage{
vec_set_intersect(
  x,
  y,
  ...,
  ptype = NULL,
  x_arg = "x",
  y_arg = "y",
  error_call = current_env()
)

vec_set_difference(
  x,
  y,
  ...,
  ptype = NULL,
  x_arg = "x",
  y_arg = "y",
  error_call = current_env()
)

vec_set_union(
  x,
  y,
  ...,
  ptype = NULL,
  x_arg = "x",
  y_arg = "y",
  error_call = current_env()
)
}
\arguments{
\item{x, y}{A pair of vectors.}

\item{...}{These dots are for future extensions and must be empty.}

\item{ptype}{If \code{NULL}, the default, the output type is determined by
computing the common type between \code{x} and \code{y}. If supplied, both \code{x} and
\code{y} will be cast to this type.}

\item{x_arg, y_arg}{Argument names for \code{x} and \code{y}. These are used in error
messages.}

\item{error_call}{The execution environment of a currently
running function, e.g. \code{caller_env()}. The function will be
mentioned in error messages as the source of the error. See the
\code{call} argument of \code{\link[rlang:abort]{abort()}} for more information.}
}
\value{
A vector of the common type of \code{x} and \code{y} (or \code{ptype}, if supplied)
containing the result of the corresponding set function.
}
\description{
\itemize{
\item \code{vec_set_intersect()} computes a set intersection. It returns the first
occurrence of values in \code{x} that also appear in \code{y}.
\item \code{vec_set_difference()} computes an asymmetric set difference. If returns
the first occurrence of values in \code{x} that don't appear in \code{y}.
\item \code{vec_set_union()} computes a set union. It returns the first occurrence of
values in \code{x} combined with the first occurrence of values in \code{y} that
don't appear in \code{x}.
}

These functions work similarly to \code{\link[=intersect]{intersect()}}, \code{\link[=setdiff]{setdiff()}}, and \code{\link[=union]{union()}},
but don't strip attributes and can be used with data frames.
}
\details{
Missing values are treated as equal to other missing values. For doubles and
complexes, \code{NaN} are equal to other \code{NaN}, but not to \code{NA}.
}
\section{Dependencies}{

\subsection{\code{vec_set_intersect()}}{
\itemize{
\item \code{\link[=vec_proxy_equal]{vec_proxy_equal()}}
\item \code{\link[=vec_slice]{vec_slice()}}
}
}

\subsection{\code{vec_set_difference()}}{
\itemize{
\item \code{\link[=vec_proxy_equal]{vec_proxy_equal()}}
\item \code{\link[=vec_slice]{vec_slice()}}
}
}

\subsection{\code{vec_set_union()}}{
\itemize{
\item \code{\link[=vec_proxy_equal]{vec_proxy_equal()}}
\item \code{\link[=vec_slice]{vec_slice()}}
\item \code{\link[=vec_c]{vec_c()}}
}
}
}

\examples{
x <- c(1, 2, 1, 4, 3)
y <- c(2, 5, 5, 1)

# All values from `x` that are in `y`.
# Duplicates in `x` are removed.
vec_set_intersect(x, y)

# All values from `x` that aren't in `y`
vec_set_difference(x, y)

# All values from `x`, plus values from `y` that aren't in `x`
vec_set_union(x, y)

# These functions can also be used with data frames
x <- data_frame(
  a = c(2, 3, 2, 2),
  b = c("j", "k", "j", "l")
)
y <- data_frame(
  a = c(1, 2, 2, 2, 3),
  b = c("j", "l", "j", "l", "j")
)

vec_set_intersect(x, y)
vec_set_difference(x, y)
vec_set_union(x, y)
}
