% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/list-transpose.R
\name{list_transpose}
\alias{list_transpose}
\title{Transpose a list of vectors}
\usage{
list_transpose(
  x,
  ...,
  size = NULL,
  ptype = NULL,
  x_arg = caller_arg(x),
  error_call = current_env()
)
}
\arguments{
\item{x}{A list.}

\item{...}{These dots are for future extensions and must be empty.}

\item{size}{The expected size of each element of \code{x}. If not provided,
computed automatically by \code{\link[=vec_size_common]{vec_size_common()}}.}

\item{ptype}{The expected type of each element of \code{x}. If not provided,
computed automatically by \code{\link[=vec_ptype_common]{vec_ptype_common()}}.}

\item{x_arg}{Argument name used in error messages.}

\item{error_call}{The execution environment of a currently
running function, e.g. \code{caller_env()}. The function will be
mentioned in error messages as the source of the error. See the
\code{call} argument of \code{\link[rlang:abort]{abort()}} for more information.}
}
\value{
A list of vectors with the following invariants:

For the list:
\itemize{
\item \code{vec_ptype(list_transpose(x)) == vec_ptype(x)}
\item \code{vec_size(list_transpose(x)) == (size || vec_size_common(!!!x))}
}

For the list elements:
\itemize{
\item \code{vec_ptype(list_transpose(x)[[i]]) == (ptype || vec_ptype_common(!!!x))}
\item \code{vec_size(list_transpose(x)[[i]]) == vec_size(x)}
}
}
\description{
\code{list_transpose()} takes a list of vectors, transposes it, and returns a new
list of vectors.
}
\examples{
# Input:
# - List size 3
# - Element size 2
# Output:
# - List size 2
# - Element size 3
list_transpose(list(1:2, 3:4, 5:6))

# With data frames
x <- data_frame(a = 1:2, b = letters[1:2])
y <- data_frame(a = 3:4, b = letters[3:4])
list_transpose(list(x, y))

# Size 1 elements are recycled to the common size before transposing
list_transpose(list(1, 2:4))

# With all size 1 elements, you can use `size` if you want to force a known
# common size other than size 1
list_transpose(list(1, 2), size = 3)

# With size 0 elements, the invariants are a bit tricky!
# This must return a size 0 list, but then you lose expected
# type (integer) and size (2) information about the elements.
# Losing that information makes it difficult to reverse the
# transposition.
#
# Input:
# - List size 2
# - Element size 0
# Output:
# - List size 0
# - Element size 2
x <- list(integer(), integer())
out <- list_transpose(x)
out

# Note how transposing a second time doesn't recover the original list
list_transpose(out)

# To work around this, provide the lost `size` and `ptype` manually
list_transpose(out, size = vec_size(x), ptype = vec_ptype_common(!!!x))

# If you'd like to pad with a missing value rather than recycling or
# erroring, you might do something like this, which left-pads
x <- list(1, 2:5, 6:7)
try(list_transpose(x))

sizes <- list_sizes(x)
size <- max(sizes)
index <- which(sizes != size)
x[index] <- lapply(
  index,
  function(i) vec_c(rep(NA, times = size - sizes[[i]]), x[[i]])
)
list_transpose(x)

# `NULL` values aren't allowed in `list_transpose()`. If you'd like `NULL`s
# to be treated as size 1 missing values, replace them with `NA` first.
x <- list(1:3, NULL, 5:7, NULL)
try(list_transpose(x))

x <- vec_assign(x, vec_detect_missing(x), list(NA))
list_transpose(x)
}
