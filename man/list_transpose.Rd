% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/list-transpose.R
\name{list_transpose}
\alias{list_transpose}
\title{Transpose a list of vectors}
\usage{
list_transpose(
  x,
  ...,
  null = NULL,
  size = NULL,
  ptype = NULL,
  x_arg = caller_arg(x),
  error_call = current_env()
)
}
\arguments{
\item{x}{A list of vectors.
\itemize{
\item Each vector will be \link[=theory-faq-recycling]{recycled} to the common size
before transposing.
\item Each vector will be \link[=theory-faq-coercion]{cast} to the common type before
transposing.
}}

\item{...}{These dots are for future extensions and must be empty.}

\item{null}{A value to replace \code{NULL} elements with before transposing.

If left unspecified, any \code{NULL} elements in \code{x} result in an error.

If specified:
\itemize{
\item Will be \link[=theory-faq-recycling]{recycled} to the common size of \code{x} before
transposing.
\item Will participate in determining the common type, and will be
\link[=theory-faq-coercion]{cast} to that type before transposing.
}

Note that \code{null} can alter the output type, but cannot alter the output
size.}

\item{size}{The expected size of each element of \code{x}. If not provided,
computed automatically by \code{\link[=vec_size_common]{vec_size_common()}}.}

\item{ptype}{The expected type of each element of \code{x}. If not provided,
computed automatically by \code{\link[=vec_ptype_common]{vec_ptype_common()}}.}

\item{x_arg}{Argument name used in error messages.}

\item{error_call}{The execution environment of a currently
running function, e.g. \code{caller_env()}. The function will be
mentioned in error messages as the source of the error. See the
\code{call} argument of \code{\link[rlang:abort]{abort()}} for more information.}
}
\value{
A list of vectors with the following invariants:

For the list:
\itemize{
\item \verb{vec_ptype(list_transpose(x)) == <list>}
\item \code{vec_size(list_transpose(x)) == vec_size_common(!!!x)}
}

For the list elements:
\itemize{
\item \code{vec_ptype(list_transpose(x)[[i]]) == vec_ptype_common(!!!x)}
\item \code{vec_size(list_transpose(x)[[i]]) == vec_size(x)}
}
}
\description{
\code{list_transpose()} takes a list of vectors, transposes it, and returns a new
list of vectors.

To predict the output from \code{list_transpose()}, swap the size of the list
with the size of the list elements. For example:
\itemize{
\item Input: List of size 2, elements of size 3
\item Output: List of size 3, elements of size 2
}
}
\examples{
# I: List size 3, Element size 2
# O: List size 2, Element size 3
list_transpose(list(1:2, 3:4, 5:6))

# With data frames
x <- data_frame(a = 1:2, b = letters[1:2])
y <- data_frame(a = 3:4, b = letters[3:4])
list_transpose(list(x, y))

# Size 1 elements are recycled
list_transpose(list(1, 2:3, 4))

# With size 0 elements, the invariants are a bit tricky!
# This must return a size 0 list, but then you lose expected
# type (integer) and size (2) information about the elements.
# Losing that information makes it difficult to reverse the
# transposition.
#
# I: List size 2, Element size 0
# O: List size 0, Element size 2
x <- list(integer(), integer())
out <- list_transpose(x)
out

# Note how transposing a second time doesn't recover the original list
list_transpose(out)

# To work around this, provide the lost `size` and `ptype` manually
list_transpose(out, size = vec_size(x), ptype = vec_ptype_common(!!!x))

# If you'd like to pad with a missing value rather than erroring,
# you might do something like this, which left-pads
x <- list(1, 2:5, 6:7)
try(list_transpose(x))

sizes <- list_sizes(x)
size <- max(sizes)
index <- which(sizes != size)
x[index] <- lapply(
  index,
  function(i) vec_c(rep(NA, times = size - sizes[[i]]), x[[i]])
)
list_transpose(x)

# `NULL` values aren't allowed in `list_transpose()`
x <- list(1:3, NULL, 5:7, NULL)
try(list_transpose(x))

# Replace them with `null`
list_transpose(x, null = NA)
list_transpose(x, null = -(1:3))

# Note that using `null` is not fully identical to swapping any `NULL`s
# with their replacement value ahead of the `list_transpose()` call.
# Most of the time `null` works as you'd expect, but some confusion can occur
# when you have a length >1 `null` and `x` is an empty list, a list of
# `NULL`s, or a list with only size 1 elements. The main thing to remember is
# that `null` is not allowed to change the output size, which makes it more
# predictable to program with, but sometimes requires you to provide more
# information through `size`.

# This is an error, because the common size from the list is 0,
# and you can't recycle `null` to that size.
try(list_transpose(list(), null = 3:4))
try(list_transpose(list(NULL), null = 3:4))

# This is also an error, because the common size from the list is 1,
# and you can't recycle `null` to that size either.
try(list_transpose(list(1, 2), null = 3:4))

# If you're programming with `list_transpose()` and you're supplying a
# length >1 `null` value like this, then that implies you know the
# expected element size (otherwise you wouldn't have been able to create
# the `null` value). Supply that `size` to override the inferred common size,
# and then things work as expected:

# I: List size 0, Element size 2
# O: List size 2, Element size 0
list_transpose(list(), null = 3:4, size = 2)

# I: List size 1, Element size 2
# O: List size 2, Element size 1
list_transpose(list(NULL), null = 3:4, size = 2)

# I: List size 2, Element size 2
# O: List size 2, Element size 2
list_transpose(list(1, 2), null = 3:4, size = 2)
}
